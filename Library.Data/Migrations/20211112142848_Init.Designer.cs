// <auto-generated />
using System;
using Library.Data.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Library.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211112142848_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Library.core.Model.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("PatientID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Library.core.Model.Availabilty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartAvailability")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StopAvailability")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Availabilties");
                });

            modelBuilder.Entity("Library.core.Model.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BIGNumber")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsStudent")
                        .HasColumnType("bit");

                    b.Property<int?>("StudentNumber")
                        .HasColumnType("int");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WorkerNumber")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Library.core.Model.MedicalFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDischarge")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("DiagnosisCode")
                        .HasColumnType("int");

                    b.Property<int?>("IntakeSupervisionID")
                        .HasColumnType("int");

                    b.Property<int?>("IntakeTherapistIdID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IntakeSupervisionID");

                    b.HasIndex("IntakeTherapistIdID");

                    b.ToTable("MedicalFiles");
                });

            modelBuilder.Entity("Library.core.Model.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalFileId")
                        .HasColumnType("int");

                    b.Property<bool>("OpenForPatient")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("MedicalFileId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Library.core.Model.Patient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("IdNumber")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImgData")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsStudent")
                        .HasColumnType("bit");

                    b.Property<int?>("MedicalFileId")
                        .HasColumnType("int");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("ID");

                    b.HasIndex("MedicalFileId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Library.core.Model.PracticeRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("PracticeRooms");
                });

            modelBuilder.Entity("Library.core.Model.TreatmentPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountOfTreatmentsPerWeek")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("MedicalFileId")
                        .HasColumnType("int");

                    b.Property<string>("Particularities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PracticeRoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TreatmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TreatmentPerformedByID")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalFileId");

                    b.HasIndex("PracticeRoomId");

                    b.HasIndex("TreatmentPerformedByID");

                    b.ToTable("TreatmentPlans");
                });

            modelBuilder.Entity("Library.core.Model.Appointment", b =>
                {
                    b.HasOne("Library.core.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("Library.core.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID");
                });

            modelBuilder.Entity("Library.core.Model.Availabilty", b =>
                {
                    b.HasOne("Library.core.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");
                });

            modelBuilder.Entity("Library.core.Model.MedicalFile", b =>
                {
                    b.HasOne("Library.core.Model.Employee", "IntakeSupervision")
                        .WithMany()
                        .HasForeignKey("IntakeSupervisionID");

                    b.HasOne("Library.core.Model.Employee", "IntakeTherapistId")
                        .WithMany()
                        .HasForeignKey("IntakeTherapistIdID");
                });

            modelBuilder.Entity("Library.core.Model.Note", b =>
                {
                    b.HasOne("Library.core.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("Library.core.Model.MedicalFile", null)
                        .WithMany("Notes")
                        .HasForeignKey("MedicalFileId");
                });

            modelBuilder.Entity("Library.core.Model.Patient", b =>
                {
                    b.HasOne("Library.core.Model.MedicalFile", "MedicalFile")
                        .WithMany()
                        .HasForeignKey("MedicalFileId");
                });

            modelBuilder.Entity("Library.core.Model.TreatmentPlan", b =>
                {
                    b.HasOne("Library.core.Model.MedicalFile", null)
                        .WithMany("TreatmentPlans")
                        .HasForeignKey("MedicalFileId");

                    b.HasOne("Library.core.Model.PracticeRoom", "PracticeRoom")
                        .WithMany()
                        .HasForeignKey("PracticeRoomId");

                    b.HasOne("Library.core.Model.Employee", "TreatmentPerformedBy")
                        .WithMany()
                        .HasForeignKey("TreatmentPerformedByID");
                });
#pragma warning restore 612, 618
        }
    }
}
